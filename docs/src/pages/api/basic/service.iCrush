<template>
    <div class='doc-view'>
        <header id='fixed-top'>
            服务
        </header>
        <h1 id="fixed-tree">
            树图
            <span class='sub-title'>
                $tree
            </span>
        </h1>
        <pre ui-code>var tree=$tree({

    // 配置基本的数据结构（必输）
    "root":function(initTree){ /*返回根结点*/ },
    "id":function(treedata){ /*返回id*/ },
    "child":function(parentTree, initTree){ /*返回孩子结点*/ },

    // 配置树图结构（可选）
    "type":LR|RL|BT|TB|circle,/*配置树图的类型（默认原始模型，会忽略下列全部设置）*/
    "width",height:number,/*设置树图的宽和高（如果类型是LR|RL|BT|TB需要设置）*/
    "cx","cy":number,/*设置圆心（如果类型是circle需要设置）*/
    "radius":number,/*设置树图半径（如果类型是circle需要设置）*/
    "begin-deg","deg":number/*开始和跨越弧度（可选，如果类型是circle设置该参数有效）*/
});</pre>
        <p>
            获取tree对象实例的时候需要传递
            <span class="public">配置</span>
            来告诉对象如何去理解用户的意图。
        </p>
        <pre ui-code>var resultData = tree(data);</pre>
        <p>
            最后，传递给
            <span class="important">tree对象</span>
            原始数据即可返回带有坐标信息等的绘图数据了。
        </p>
        <h1 id="fixed-animation">
            动画
            <span class='sub-title'>
                $animation
            </span>
        </h1>
        <pre ui-code>var stop = $animation(function(deep){
    // deep取值0-1，表示动画进度
}, speeds, function(deep){
    // deep和上面一样，提供的原因是有时候结束回调是stop方法触发而不是动画结束了
},timing);</pre>
        <p>
            该方法有四个参数：分别表示画帧方法、动画时长、动画结束回调和进度控制参数（动画时长单位毫秒，最后三个均可选）。
        </p>
        <p>
            其中timing可以为字符串或数组，字符串可选参数有：
            <span class="public">"ease"</span>
            、
            <span class="public">"ease-in"</span>
            、
            <span class="public">"ease-in-out"</span>
            、<span class="public">"ease-out"</span>
            和
            <span class='public'>"linear"</span>
            （默认值），值的意义和css中的属性
            <span class="important">transition-timing-function</span>
            基本一致，数组的话也是和这个属性保持一致，长度为4。
        </p>
        <p>
            如果希望动画立刻结束，可以调用动画返回的方法主动停止：
        </p>
        <pre ui-code>stop();</pre>
        <h1 id="fixed-cardinal">
            函数插值
            <span class='sub-title'>
                $cardinal
            </span>
        </h1>
        <pre ui-code>var cardinal = $cardinal({
    // 可选，设置张弛系数，默认1，分水岭0，值越大，曲线走势调整的越严重
    rate:number
});</pre>
        <p>
            <span class="important">插值函数</span>
            获取以后，还需要设置
            <span class="important">插值点</span>
            ：
        </p>
        <pre ui-code>
// 插值点可以重复设置，以最后一次设置的为准
cardinal.setP([[X1,Y1],[X2,Y2],...,[Xn, Yn]]);
        </pre>
        <p>
            设置好插值点以后，比如现在需要求解x=a（a必须属于闭区间
            <span class="public"> [ X1 , Xn ] </span>
            ）对应的y值：
        </p>
        <pre ui-code>var y = cardinal(a);</pre>
        <h1 id="fixed-rotate">
            旋转
            <span class='sub-title'>
                $rotate
            </span>
        </h1>
        <p>
            点（x,y）围绕中心（cx,cy）旋转deg度：
        </p>
        <pre ui-code>$rotate(cx, cy, deg, x, y);</pre>
        <h1 id="fixed-move">
            移动
            <span class='sub-title'>
                $move
            </span>
        </h1>
        <p>
            点（x,y）沿着向量（ax,ay）方向移动距离d：
        </p>
        <pre ui-code>$move(ax, ay, d, x, y);</pre>
        <h1 id="fixed-scale">
            缩放
            <span class='sub-title'>
                $scale
            </span>
        </h1>
        <p>
            点（x,y）围绕中心（cx,cy）缩放times倍：
        </p>
        <pre ui-code>$scale(cx, cy, times, x, y);</pre>
        <h1 id="fixed-dot">
            点对象
            <span class='sub-title'>
                $dot
            </span>
        </h1>
        <pre ui-code>var dot=$dot({
    // 前进方向、中心坐标和当前位置（都可选，下列是缺省值）
    d: [1, 1],c: [0, 0],p: [0, 0]
});</pre>
        <p>
            下列是
            <span class="important">一些变换方法</span>
            ，通过这些方法可以控制点dot的坐标改变或获取当前坐标。
        </p>
        <p>
            前进方向以当前位置为中心，旋转deg度（注意，改变的是前进方向，不是当前坐标）：
        </p>
        <pre ui-code>dot.rotate(deg);</pre>
        <p>
            沿着当前前进方向前进d：
        </p>
        <pre ui-code>dot.move(d);</pre>
        <p>
            围绕中心坐标缩放：
        </p>
        <pre ui-code>dot.scale(times);</pre>
        <p>
            在上述操作的任意时刻，如果希望
            <span class="important">获取当前点</span>
            的坐标：
        </p>
        <pre ui-code>var p=dot.value();</pre>
        <h1 id="fixed-formatColor">
            颜色
            <span class='sub-title'>
                $formatColor
            </span>
        </h1>
        <p>
            给定任意一个合法的css颜色字符串，把颜色统一转变成rgba格式，返回一个数组[r,g,b,a]：
        </p>
        <pre ui-code>$color.formatColor(colorString);</pre>
        <h1 id="fixed-getRandomColors">
            颜色
            <span class='sub-title'>
                $getRandomColors
            </span>
        </h1>
        <p>
            传递需要的颜色个数，返回一组随机色彩：
        </p>
        <pre ui-code>// alpha可选，取值是0-1，表示颜色透明度
$color.getRandomColors(number, alpha);</pre>
    </div>
</template>
<script>
    import changeActive from '../../../Service/changeActive.js';
    import fixedScroll from '../../../Service/fixedScroll.js';
    export default {
        created() {
            changeActive('menu-2', 'service');
        },
        mounted() {
            fixedScroll(document.getElementById('api-id'), 44);
        }
    };

</script>
