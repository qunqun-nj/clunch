<template>
    <div class='doc-view'>
        <header id='fixed-top'>
            绘图对象
        </header>
        <p>
            此处用于列举所有可用的接口或配置项等，方便你在使用过程中查阅，如果你是新手，想学习如何使用
            <span class="important">clunch.js</span>
            的话，请移步到
            <a href="#/course" target="_blank">教程</a>
            部分，谢谢！
        </p>
        <h1 id="fixed-config">
            配置项
            <span class='sub-title'>
                option
            </span>
        </h1>
        <ul>
            <li>
                <span class="important">el</span>
                ：可选，页面挂载画布的结点。
            </li>
            <li>
                <span class="important">render</span>
                ：必输（如果template没有传递的话），表示当前图形内容，你可以在
                <a href="#/api/series?fixed=top" target="_blank">图形小组件</a>
                部分了解更多细节。
            </li>
            <li>
                <span class="important">animation</span>
                ：可选，默认true，表示数据改变提供动画，如果设置为false，就会取消数据改变动画。
            </li>
            <li>
                <span class="important">time</span>
                ：可选，默认500，表示数据改变动画进行时长，单位ms。
            </li>
            <li>

                <span class="important">methods</span>
                ：格式如下：
                <pre ui-code>methods:{
    doit1(){
        // todo
    },
    ...
}</pre>
                用于定义一些方法，姑且称之为
                <span class="important">对象上的方法</span>
                。<br />
                可是，有时候方法里面可能需要借助一些
                <span class="important">内置服务</span>
                来计算：
                <pre ui-code>methods:{
    doit1:["server1Name", "server2Name", ..., function(server1, server2, ...){
        return function(){
            // todo
        };
    }]
}</pre>
                具体有哪些服务可以使用，请查看
                <a href="#/api/service?fixed=top" target="_blank">服务</a>
                一节。
            </li>
            <li>
                <span class="important">data</span>
                :格式如下：
                <pre ui-code>data(){
    return {
        key1:value1,
        // ...
    };
}</pre>
                用于定义一些数据，姑且称之为
                <span class="important">对象上的数据</span>
                。
            </li>
            <li>
                <span class="important">钩子</span>
                :也就是
                <a href="#/api/object?fixed=liefcycle" target="_blank">生命周期</a>
                ,用于提供在特定时期执行一些操作的能力。
            </li>
        </ul>
        <h2 id="fixed-template">template</h2>
        <p>
            在一般情况下，render由webpack配置的loader解析
            <span class="public">.clunch文件</span>
            自动生成，可是，如果你的项目不是基于webpack搭建的，就可以使用此属性。
        </p>
        <p>
            此属性非常简单,就是把原本写在
            <span class="public">.clunch文件</span>
            中的代码以字符串的形式作为此配置项的值即可。
        </p>
        <p class="warn">
            温馨提示：template和render是两个互斥的选项，如果两个同时存在，由于render优先级更高，因此template会被忽略！
        </p>
        <h1 id="fixed-liefcycle">生命周期</h1>
        <h2 id="fixed-what">有哪些钩子</h2>
        <p>
            对象创建和销毁、画布缩放、对象和页面关联和解关联、数据改变等，我们提供了以下钩子来帮助你在特定时机去触发必要的处理动作：
        </p>
        <ul>
            <li>
                <span class="important">beforeCreate</span>
                :对象创建前
            </li>
            <li>
                <span class="important">created</span>
                :对象创建完毕
            </li>
            <li>
                <span class="important">beforeMount</span>
                :对象和页面关联前
            </li>
            <li>
                <span class="important">mounted</span>
                :对象和页面关联后
            </li>
            <li>
                <span class="important">beforeUnmount</span>
                :对象和页面解关联前
            </li>
            <li>
                <span class="important">unmounted</span>
                :对象和页面解关联后
            </li>
            <li>
                <span class="important">beforeUpdate</span>
                :数据改动前
            </li>
            <li>
                <span class="important">updated</span>
                :数据改动后
            </li>
            <li>
                <span class="important">beforeResize</span>
                :画布大小改变前
            </li>
            <li>
                <span class="important">resized</span>
                :画布大小改变后
            </li>
            <li>
                <span class="important">beforeDraw</span>
                :画布重绘前
            </li>
            <li>
                <span class="important">drawed</span>
                :画布重绘后
            </li>
            <li>
                <span class="important">beforeDestroy</span>
                :对象销毁前
            </li>
            <li>
                <span class="important">destroyed</span>
                :对象销毁后
            </li>
        </ul>
        <h1 id="fixed-method">对象上的方法</h1>
        <h3 id="fixed-mount">
            $mount
        </h3>
        <p>
            对象配置项
            <span class='public'>option.el</span>
            为非必输项，表示对象在页面中管理的区域或挂载点，如果创建的时候没有设置，那么也可以后续主动挂载：
        </p>
        <pre ui-code>this.$mount(el);</pre>
        <p>
            这个方法会导致在挂载前后分别触发
            <span class="important">beforeMount</span>
            和
            <span class="important">mounted</span>
            钩子。
        </p>
        <h3 id="fixed-unmount">
            $unmount
        </h3>
        <p>
            当然，如果已经和页面关联起来了，也就是已经挂载的对象现在想解除关联，释放对某个区域的控制，只需要调用这个方法即可：
        </p>
        <pre ui-code>this.$unmount();</pre>
        <p>
            这个方法会导致在挂载前后分别触发
            <span class="important">beforeUnmount</span>
            和
            <span class="important">unmounted</span>
            钩子。
        </p>
        <h3 id="fixed-destroy">
            $destroy
        </h3>
        <p>
            如果当前的绘图对象彻底失去了意义，为了释放资源，请直接调用下面方法：
        </p>
        <pre ui-code>this.$destroy();</pre>
        <p>
            这个方法会导致在挂载前后分别触发
            <span class="important">beforeDestroy</span>
            和
            <span class="important">destroyed</span>
            钩子。
        </p>
        <h3 id="fixed-bind">
            $bind
        </h3>
        <p>
            虽然通过指令
            <a href='#/api/directive?fixed=c-on' target="_blank">c-on</a>
            我们可以为图形小组件绑定事件，可是如果想给绘制的画布本身绑定事件，你需要这样做：
        </p>
        <pre ui-code>this.$bind(eventName, callback);</pre>
        <p>
            需要注意的是，无论是生命周期钩子还是这里绑定的方法，当前上下文this都是你创建的clunch对象。
        </p>
    </div>
</template>
<script>
    import changeActive from '../../../Service/changeActive.js';
    import fixedScroll from '../../../Service/fixedScroll.js';
    export default {
        created() {
            changeActive('menu-2', 'object');
        },
        mounted() {
            fixedScroll(document.getElementById('api-id'), 44);
        }
    };

</script>
